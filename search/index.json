[{"content":"论文2：\u0026ldquo;CHAOARO：基于动态混沌对抗的学习驱动混合Aquila优化器和人工兔优化算法\u0026rdquo;\n1.AO：Aquila 优化器（2021）\nAO具有强大的探索能力，但由于探索阶段不足，在解决一些复杂情况时仍然存在求解精度差和过早收敛的问题。\n证明AO缺点的论文:Zhao, J.; Gao, Z.-M.; Chen, H.-F. The simplified aquila optimization algorithm. IEEE Access 2022, 10, 22487–22515. [CrossRef]\n2.ARO具有非常有竞争力的开采潜力，但其勘探能力还需要更令人满意。（2022）\n​\tARO算法的灵感来源于自然界中兔子的生存策略，包括迂回觅食和随机躲藏。迂回觅食策略迫使兔子吃其他兔子巢穴附近的草，这可以防止它的巢穴被捕食者发现。随机躲藏策略可以让兔子在自己的洞穴中随机选择一个洞穴躲藏，这样可以减少被敌人捕获的可能性。此外，兔子的能量收缩会导致其从迂回觅食策略向随机躲藏策略转变。该算法对这种生存策略进行数学建模，以开发一种新的优化器。\n​\tARO的探索和开发过程由E控制，这个E的公式里面是有随机数的，所以在勘探里面会有开发，在开发里面也会有勘探，但总的来说，前期勘探多，后期开发多。\n3.该论文的创新点结合AO的勘探机制和ARO的开发机制，设计了自适应切换机制（ASM）以更好地控制探索和开发过程。这个自适应切换机制就是AVAO的饥饿率，还引入混沌对立学习（COBL）策略来避免算法陷入局部最优。\n4.混沌对立学习：\n这个φ就是混沌因子，论文里面提及了10个。需选择实验结果最好的一个\n提醒一下，除了现在学习的混沌对立学习，之前学习了随机对立学习，镜头对立学习，复合对立学习和螺旋对立学习\n","date":"2024-09-19T00:00:00Z","image":"https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/CHAOARO_hu4990591543156300968.png","permalink":"https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/","title":"CHAOARO：基于动态混沌对抗的学习驱动混合Aquila优化器和人工兔优化算法"},{"content":"论文l：IHAOAVOA: An improved hybrid aquila optimizer and African vultures optimization algorithm for global optimization problems IHAOAVOA：针对全局优化问题的改进混合 Aquila 优化器和非洲秃鹫优化算法\nAO：Aquila 优化器（2021）\nAO的特点：具有较强的全局勘探能力，但局部开发能力不够。\n证明第二点论据的论文：S. Wang, H. Jia, L. Abualigah, Q. Liu, R. Zheng, An improved hybrid aquila optimizer and harris hawks algorithm for solving industrial engineering optimization problems, Processes, 9 (2021),1551. https://doi.org/10.3390/pr9091551\n原因：不可避免地存在过早收敛和容易陷入局部极小值，主要是由于利用阶段不充分导致的，exploration占2/3，exploiation只占1/3。\n四种策列，勘探阶段和开发阶段各占两种。\n+++\n1.AVOA：非洲秃鹫优化算法（2021）\n2.AVOA的优点：具有非常好的开发能力，但缺少全局勘探能力。\n3.AVOA的步骤：\n确定最好种群和第二好种群 计算饥饿率,AVOA是根据饥饿率来确定勘探阶段和开发阶段的，饥饿率的计算是有一套公式，里面有随机值，有一定的随机性，也有根据迭代的代数影响，但总的趋势是越来越小。 4.勘探有两个方法，开发有四种方法，所以说它开发能力强。\n+++\nOBL：对立学习 OBL主要思想是同时评估当前解的适应度和对立解的适应度，然后保留较优解。 缺点：OBL只能在一个固定位置生成对立解，仍然无法改善复杂问题的缺陷 证明第3点论据的论文：Q. Fan, Z. Chen, W. Zhang, X. Fang, ESSAWOA: Enhanced whale optimization algorithm integrated with salp swarm algorithm for global optimization, Eng. Comput., 38 (2022), 797–814.https://doi.org/10.1007/s00366-020-01189-3 LOBL：镜头对立学习 6.ROBL：随机对立学习，用rand（）函数，具有较大的随机性，可以增加种群的多样性。\n7.COBL:该论文的复合对立学习：使用概率决定使用LOBL或者ROBL\n+++\nFitness-Distance Balance:适应值-距离平衡（FDB）\n在共生有机体搜索（SOS），随机分形搜索（SFS），郊狼优化算法（COA）有使用到这种方法 FDB在得分不仅考虑候选解的适应度，还考虑和最优解的距离 可以在哪些地方使用：在一些方法里面有使用到，在种群里面随机找一个解的这种情况，可以使用FDB个体，进行代替 +++\nIHAOAVOA\n想法：使用螺旋对立学习+一个算法进行勘探+FDB+AVOA进行开发\n","date":"2024-09-16T00:00:00Z","image":"https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_3_hu11466526782920018254.png","permalink":"https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/","title":"IHAOAVOA：针对全局优化问题的改进混合 Aquila 优化器和非洲秃鹫优化算法"},{"content":"\n","date":"2024-09-01T00:00:00Z","image":"https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B82_hu9166494751991758816.png","permalink":"https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/","title":"找工作"},{"content":"上传文档到博客的步骤 首先创建一个文档，指令为：hugo new content post/名字/index.zh-cn.md 在文档内添加头部信息，包括标签，时间等 1 2 3 4 5 6 7 8 --- title: \u0026#34;使用 Hugo 建立自己的 Blog\u0026#34; date: 2023-07-01 tags: [\u0026#34;hugo\u0026#34;, \u0026#34;blog\u0026#34;] categories: [\u0026#34;博客改造\u0026#34;] image: florian-klauer-nptLmg6jqDo-unsplash.jpg draft: false --- 解释：\n“ - - - ”必须要有\ntitle: \u0026ldquo;使用 Hugo 建立自己的 Blog\u0026rdquo; //博客名字\ndate: 2023-07-01 //时间\ntags: [\u0026ldquo;hugo\u0026rdquo;, \u0026ldquo;blog\u0026rdquo;] //标签\ncategories: [\u0026ldquo;博客改造\u0026rdquo;] //归档\nimage: florian-klauer-nptLmg6jqDo-unsplash.jpg //上传博客照片，直接使用文件名\ndraft: false //这表示该文章是否是草稿状态，false不会在网站上公开显示。它可以被用来保存和编辑内容，直到你准备好发布为止。\n3.编写博客，上传照片直接拉取，会把找复制到当前文档的文件夹下。\n4.使用命令hugo server -D 生成静态页面\n5.使用命令自动部署\n1 2 3 git add . git commit -m \u0026#34;提交信息\u0026#34; git push git的使用 ","date":"2023-09-14T00:00:00Z","image":"https://ztcode9547.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8Agit%E7%9A%84%E4%BD%BF%E7%94%A8/gerenboke_hu6363876004735364835.jpg","permalink":"https://ztcode9547.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8Agit%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"博客更新步骤以及git的使用"},{"content":"","date":"2023-08-23T00:00:00Z","permalink":"https://ztcode9547.github.io/p/%E6%89%8B%E6%92%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/","title":"手撕线程池"},{"content":"程序的执行过程 ​\t编程被执行后会变成一个进程。进程会生成一个虚拟地址空间。但是对于程序员来说，只要了解虚拟地址空间的四个区即可。想深入了解，可以去学习操作系统这门课。\n代码区和常量区： ​\t此区是用来存放代码的，也会用来存放真正的常量，比如“abc”字符串，“1”，“88”等数字。这些是真正的常量。再来看，使用const关键字修饰的变量，只是编译器把变量视为常量罢了。和真正的常量有本质上的区别。如果是局部变量被const关键字修饰，那它很有可能存在栈上。如果是全局的变量被const修饰，那它可能存在常量区，这要看编译器。\n栈区\n​\t是函数执行的空间，规则是先入后处出。当函数开始执行，将会压栈。当函数执行完毕，将会出栈，内存将会释放。 3. 堆区\n​\t是程序动态分配内存的地方，因为栈区的内存很小，如果我们有一个很大的变量，压栈是非常耗费资源的。所以我们可以在堆区给那个很大的变量动态分配内存，得到指向那个变量的指针后·。在栈区使用指针来操作那个变量，提高了程序的执行效率。需要提醒一点：堆区的内存远远大于栈区。\n​\t有一个非常注意的点，堆区的内存需要手动释放，不然会造成内存泄漏。而栈则不需要，栈会根据顺序自动出栈，所以内存会自动销毁。\n静态变量区和全局变量 ​\t是存放静态变量的区域。所有的变量概括起来，就两个范畴。一个是生命周期，一个是作用域。静态变量是生命周期贯穿整个进程。但是它有自己的作用域。静态变量是在程序运行前，就进行了初始化。和那些在栈上面完成初始化，在堆上动态分配内存后在开始初始化的变量，有本质的区别。\n​\t是存放全局变量的区域。全局变量是**所有函数之外（包括main函数外）**定义的变量，这种变量叫全局变量。在c语言中经常使用，但是在C++不建议使用，因为会破坏封装性\n非常有可能遇到的坑：在栈上面动态分配内存后，得到的指向那块内存的指针。这个指针是属于栈上的局部变量，它会随着出栈而被释放。如果这个变量是普通的变量，没有析构函数，那会造成内存泄漏问题。所有一定要几种手动释放内存。\nnew关键字 C++经常使用new关键字动态分配内存\n它可以给当个变量分配内存，也可给数组分配内存\n在分配单个对象的内存时。\n当对象是普通变量时，可以分配对应的内存 当对象是类对象时，会调用构造函数，如果没有对应的构造函数，就会报错。 在分配数组对象内存时：\n对于普通变量：可以使用“（）”将所有对象全部初始化为0。 对于类对象，有没有“（）”都一样，均使用默认构造函数，如果没有默认构造函数就会报错。 和c语言的malloc的区别：使用普通变量没区别，分配类对象的时候，new首先会分配内存，然后再调用构造函数。\n内存泄漏问题 内存泄漏是指堆内存被占满，这是最严重的错误，会导致程序破溃。且这种错误非常的隐秘。\n避免内存泄漏的方法：\n1.new内存，记得delete掉，但是人往往会疏忽。\n2.使用智能指针，智能指针能够自己释放掉内存。是非常好的防御性编程手段。\n3.使用异常处理部分可以恰当的处理程序出现的异常，让程序有错误就立马处理，或直接终止进程，或忽略，不要让异常莫\t名其妙。这也是非常好的防御性编程手段。\n4.使用一些监测内存泄漏的工具。在window端和Linux端都有这样的工具\n命名空间 ​\t在大型项目中，往往是多个小组协调合作。所有很容易造成命名的重复，造成编译的错误。所有命名空间就是为解决这个问题而出现的。\n1 2 3 4 5 6 7 8 9 //比如团队A和团队B都需要定义一个叫做Test的类。 namespace A { test(); } namespace B { test(); } 命名空间的实现原理，C++最后都要转化为C来执行程序。在namespace A中定义的Test类，其实全名是A::Test。\nC++所有特有的库（指c没有的库）,都使用了std的命名空间。比如最常用的iostream。\n提及命名空间，就不得不提using关键字了。\nusing关键字是为了节省命名空间的书写。using关键字在命名空间方面主要有两种用法。\nusing 命名空间：：变量名。这样以后使用此变量时只要使用变量名就可以了。 using namspce 命名空间。这样，每一个变量都会在该命名空间中寻找。 注意点：using关键字虽然方便，但也有可能造成命名空间的污染，当两个空间的同名的变量都使用using关键字，编译器就不知道使用哪一个了。所有千万不要在头文件使用using关键字，这样造成命名空间污染是很难找到。要使用也要在main.cpp文件下使用。\n","date":"2023-08-01T00:00:00Z","permalink":"https://ztcode9547.github.io/p/c-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/","title":"C++基本特性"},{"content":"网络通信：Socket+IO复用+多线程或者线程池+libevent框架\n基本概念 局域网 覆盖范围较小的计算机网络，外面访问不到。\n广域网 是一种覆盖广泛地理区域的计算机网络，它可以跨越城市、国家甚至跨越大陆。\n网络协议 是互相通信对等实体必须遵守的一种规则，这种规则可以是标准的，也可以说自定义的。\nIP协议 是表示终端在网络中的地址，分为IPv4和IPv6。\n我们在window系统cmd下输入命令ipconfig或者在Linux系统下输入ifconfig都可以显示ip地址，这个ip地址是局域网内的ip地址，如果使用网线接入外网，会统一分配公网IP地址。\nIPv4本质是一个整形数，有4个字节，所以有32位，所以有2的32次方个ip地址。\nIPv4使用点分十进制来表示，比如192.168.247.135，最小为：0.0.0.0，最大为：255.255.255.255。\n可以使用ping+域名的方式查看当前设备是否能访问域名地址。\n端口 ip地址是能够定位设备，端口是能够定位计算机里面的进程。\n端口本质是一个无符号的短整型，占两个字节，所以有0到65535种可能性。\n客户端执行connect函数后，会分配一个新的端口。\nTcp/Ip四层模型 应用层：最上层，也是程序员写业务的层次。有HTTP（超文本传输协议），FTP（文件传输协议）\n传输层：TCP协议，UDP协议\n网络层：IP协议\n网络接口层：无线局域网（WLAN），以太网（Ethernet）\n字节序 顾名思义是字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，也就是说对于单字符来说是没有字节序问题的，字符串是单字符的集合，因此字符串也没有字节序问题。\n目前字节序有两种：小端字节序（主机字节序）和大端字节序（网络字节序）\n小端字节序（主机字节序）：\n数据的地位存储到内存的地位，数据的高位存储到内存的高位。 我们使用的PC机，数据的存储默认使用的是小端。 大端字节序（网络字节序）：\n数据的地位存储内存的高位，数据的高位存储内存的地位。 套接字通信过程中操作的数据都是大端存储的，包括：接收/发送的数据、IP地址、端口。 字节序在编程中一般在ip地址和端口绑定需要手动转换，而在发送数据和接收数据的函数里，系统内核自动帮我们进行字节序的转换\n总结:我们使用的设备是用主机字节序的，而网络通信是使用网络字节序的，所以我们要把数据转为网络字节序进行通信，通信结束，然后又把网络字节序转为主机字节序进行接收。\n字节序举例： Socket网络通信 ​\t就像一台排插，排插就是服务器，插头就是客户端，排插有多个插口，等待多个插头链接。和套接字相关的函数被包含在头文件arpa/inet.h中。一个头文件就全部包含了socket相关的api。\nTCP通信流程 TCP三大特点：面向连接，安全，流式传输\n面向连接：是一个全双工的通信，三次握手建立连接，四次挥手解除链接。\n安全：会对每一个包进行校验，丢包会重发。\n流式传输：相当于发送接收两端有一条水管，发送多了，接收不了那么多，会让发送慢点。\n文件描述符在网络通信中的作用 一个文件描述符对应两个内存。一个叫读缓冲区，一个叫写缓冲区。我们在调用accept函数，send函数和wirte函数时，客户端和服务器不是直接发送的，而是通过这些函数往这些缓冲区写数据或者读数据，然后内核会帮我们从缓冲区里面拿数据进行网络通信，是操作系统自动的。\n一个文件描述符对应两个内存：一个叫读缓冲区，一个叫写缓冲区。\n读缓冲区：通过文件描述符可以把内存的数据读出。\n写缓冲区：通过文件描述符可以往内存写入数据。\n监听类型的文件描述符：也包含两块内存\n调用accpet函数会监听这个文件描述符的读缓冲区，如果没有连接请求，这个读缓冲区为空，则会阻塞。这也是调用accept函数会阻塞的原因。 如果不为空，则可以往读缓冲区内存读数据，则解除阻塞。说明有新的客户端连接。 通信的文件描述符:也包含两块内存\n和上面类似，调用的send函数和wirte函数都是监听内存是否有数据。 总结：通过这种方式，可以增加网络通信的安全性，程序员不必管数据是如何发送和接收的，只要把数据放入相应的缓冲区和读取相关的缓冲区即可。\n通信代码 经典的Tcp的回声服务器端代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include\u0026#34;servero.h\u0026#34; #include\u0026lt;string.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; #include\u0026lt;sys/socket.h\u0026gt; #include\u0026lt;arpa/inet.h\u0026gt; int echo_server() { //创建套接字 int serfd = socket(AF_INET, SOCK_STREAM, 0); if (serfd == -1) { perror(\u0026#34;socket create fail\\n\u0026#34;); return -1; } //捆绑ip和端口 struct sockaddr_in serAddr; serAddr.sin_addr.s_addr = INADDR_ANY;//这个宏的值为0 == 0.0.0.0，可以接受任何地址来的客户端 serAddr.sin_family = AF_INET; serAddr.sin_port = htons(10000);//htons函数将端口主机字节序-》网络字节序 int ret = bind(serfd, (struct sockaddr*)\u0026amp;serAddr, sizeof(serAddr)); if (ret == -1) { perror(\u0026#34;bind fail\\n\u0026#34;); return -1; } //listen函数 ret = listen(serfd, 5); if (ret == -1) { perror(\u0026#34;listen fail\\n\u0026#34;); return -1; } //accept函数 struct sockaddr_in cliAddr; int clilen = sizeof(cliAddr); int cliefd = accept(serfd, (struct sockaddr*)\u0026amp;cliAddr, \u0026amp;clilen);//和bind不一样，accept存的是指向内存大小那个变量的指针 if (cliefd == -1) { perror(\u0026#34;accept fail\\n\u0026#34;); return -1; } printf(\u0026#34;客户端的ip地址是%s,端口号为%d\\n\u0026#34;, inet_ntoa(cliAddr.sin_addr), ntohs(cliAddr.sin_port));//打印客户端的地址和端口 while (1) { //read函数 char* buf = malloc(sizeof(char) * 1024); memset(buf, 0, sizeof(char) * 1024); ssize_t read_len = read(cliefd, buf, sizeof(buf) * 1024); if (read_len \u0026gt; 0) { //send函数 printf(\u0026#34;客户端说：%s\u0026#34;, buf); ssize_t write_len =write(cliefd, buf, read_len);//发送不需要发送这个buf，看读到多少字节，或者使用stlen函数+1。 if (write_len == -1) { perror(\u0026#34;发送数据失败了\\n\u0026#34;); return -1; } } else if (read_len == 0) { perror(\u0026#34;客户端断开连接\\n\u0026#34;); return -1; } else { perror(\u0026#34;接收数据失败\\n\u0026#34;); return -1; } free(buf);//动态分配内存记得释放 } //close函数 close(cliefd); close(serfd); }; 缺点：服务器只能和一个客户端通信，且服务器没有客户端连接会阻塞。连接后客户端没有发数据，服务器也会阻塞。基于上述处理方式，在单线程/单进程场景下，服务器是无法处理多连接的。\n改进：使用多线程；使用多进程；使用IO多路复用；多线程+IO多路复用。\n遇到的一个坑：使用printf函数打印中文，文件一定要使用utf-8格式，Linux系统是默认使用utf-8格式，不然会出现乱码。解决方法：使用记事本把文件另存为utf-8格式，然后替代原来的文件。\n经典的Tcp的客户器端代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include \u0026lt;cstdio\u0026gt; #include\u0026lt;string.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; #include\u0026lt;sys/socket.h\u0026gt; #include\u0026lt;arpa/inet.h\u0026gt; int main() { //创建socket int clifd = socket(AF_INET, SOCK_STREAM, 0); if (clifd == -1) { perror(\u0026#34;socket create fail\\n\u0026#34;); return -1; } //connect函数 struct sockaddr_in serAddr; serAddr.sin_addr.s_addr = inet_addr(\u0026#34;192.168.136.1\u0026#34;); serAddr.sin_family = AF_INET; serAddr.sin_port = htons(10000); int ret = connect(clifd, (struct sockaddr*)\u0026amp;serAddr, sizeof(serAddr)); if (ret == -1) { perror(\u0026#34;connect fail\\n\u0026#34;); return -1; } int num = 0; while (1) { //send函数 char buf[1024]; printf(\u0026#34;%d\\n\u0026#34;, num); sprintf(buf, \u0026#34;第%d次说话\\n\u0026#34;, num++);//动态格式化字符串 sleep(1);//延迟1秒 ssize_t send_len = send(clifd, buf, strlen(buf)+1, 0);//不使用sizeof，不必发送整个buf，使用strlen函数+1看字符串长度。 memset(buf, 0, strlen(buf)); if (send_len == -1) { perror(\u0026#34;发送数据失败了\\n\u0026#34;); return -1; } //read函数 ssize_t raed_len = read(clifd, buf, sizeof(buf)); printf(\u0026#34;%s\u0026#34;, buf); if (raed_len == -1) { perror(\u0026#34;接收数据失败了\\n\u0026#34;); return -1; } } //close函数 close(clifd); return 0; } 多线程的Tcp的回声服务器端代码 ","date":"2023-07-01T00:00:00Z","image":"https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/TCP_hu13469394931826658467.png","permalink":"https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/","title":"socket编程"},{"content":"TCP的三次握手和四次挥手 ","date":"2023-07-01T00:00:00Z","image":"https://ztcode9547.github.io/florian-klauer-nptLmg6jqDo-unsplash.jpg","permalink":"https://ztcode9547.github.io/p/tcp%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E7%B2%98%E5%8C%85%E7%9A%84%E5%A4%84%E7%90%86/","title":"TCP原理及对粘包的处理"},{"content":"进程是资源分配的最小单元，线程是操作系统调度执行的最小单元。\n进程和线程的区别 从空间的角度：进程使用一个独立的空间，多个线程共用一个独立的空间。每个线程都有自己的栈区，线程之间共用堆区，代码区和常量区，静态区。 从操作系统调度的角度：一个进程只能占用一个时间片，多个线程占用多个时间片。不管是线程还是进程，都只能占一个时间片 从切换和调度的损耗角度：线程的上下文切换损耗较低，进程则较大。 线程相关的函数（C语言） 头文件：#include \u0026lt;pthread.h\u0026gt;\n得到线程ID： 1 pthread_t pthread_self(void);\t// 返回当前线程的线程ID 线程创建： 1 2 3 4 5 6 7 8 9 10 11 12 /** * @brief 创建一个线程。 * * @param[out] thread 需要创建的线程ID。 * @param[in] attr 属性一般填NULL。 * @param[in] start_routine,线程函数指针，为void *(*start_routine) (void *)类型 * @param[in] arg，将数据传入线程函数内部，为void*类型 * * @return 线程创建成功返回0，创建失败返回对应的错误号。 */ int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg） 主线程的生命周期和进程是一起的，主线程执行完，虚拟地址空间会被回收，不管子线程执行完没有，子线程也会被回收。所以可以使用pthread_join函数，这个函数是一个阻塞函数，让主线程阻塞，等待子线程执行完再回收资源。\n线程回收函数： 1 2 3 4 5 6 7 8 9 10 /** * @brief 1.阻塞主线程，等待子线程执行完。 2.获取子线程退出的数据，搭配pthread_exit使用 *\t* @param[in] thread 被回收的线程ID。 * @param[out] retval 二级指针，指向一级指针的地址, 是一个传出参数, 这个地址中存储了pthread_exit() 传递出的 *\t数据，如果不需要这个参数，可以指定为NULL。 * * @return 线程回收成功返回0，回收失败返回错误号。 */ int pthread_join(pthread_t thread, void **retval); 坑：子线程回收退出时，回收子线程数据，这个数据不能在子线程的栈上，因为子线程退出，子线程的栈会被回收，这个空间不能被访问。这个数据只能放在全局区或者堆区，要不放在主线程的栈上。\n线程退出函数： 1 2 3 4 5 6 7 8 9 10 /** * @brief 1.只要调用这个函数，该线程会退出，且不会释放虚拟地址空间，不管是主线程还是子线程，所以经常用来让线程 *\t退出。 * @brief 2.也可也搭配pthread_join使用，回收子线程的数据 *\t* @param[in] retval 线程退出的时候携带的数据，当前子线程的主线程会得到该数据。如果不需要使用，指定为NULL * * @return 线程分离成功返回0，回收失败返回错误号。 */ void pthread_exit(void *retval); 线程分离函数 1 2 3 4 5 6 7 8 9 /** * @brief 1.只要调用这个函数，子线程会和主线程分离，子线程的回收不归主线程管了，子线程的回收其占用的内核资源就 *\t被系统的其他进程接管并回收了。 *\t* @param[in] thread 子线程ID * * @return */ int pthread_detach(pthread_t thread); 几种使用情况：\n1.如果不介意主线程阻塞，可以使用pthread_join函数回收子线程。\n2.如果介意主线程阻塞，可以使用pthread_detach函数进行线程分离。\n3.如果线程执行完了，建议添加线程退出函数，更规范些。\n线程相关的函数（C++） ","date":"2023-07-01T00:00:00Z","image":"https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB_hu6862970110227381360.png","permalink":"https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","title":"多线程"},{"content":"线程同步 概念 同步方式 互斥锁，读写锁，条件变量和信号量\n临界资源 全局变量或者是堆区变量\n互斥量 不是所有的线程都可以对互斥锁解锁，哪个线程加的锁, 哪个线程才能解锁成功。\n死锁 读写锁 ​\t读写锁是互斥锁的升级版, 在做读操作的时候可以提高程序的执行效率，如果所有的线程都是做读操作, 那么读是并行的，但是使用互斥锁，读操作也是串行的。\n​\t有两种锁的方式：锁读操作和锁写操作。锁读操作后，其他的锁读操作是被允许的，但是锁写操作就被阻塞了。锁写操作后，其他的锁读操作和锁读操作是不被允许的。\n条件变量 一般情况下条件变量用于处理生产者和消费者模型，并且和互斥锁配合使用。\n信号量 信号量和条件变量相同的是可以阻塞线程，不同的是条件变量能解开互斥量的锁，信号量不能解锁。\n资源数为1：如果生产者和消费者使用的信号量总资源数为1，那么不会出现生产者线程和消费者线程同时访问共享资源的情况，不管生产者和消费者线程有多少个，它们都是顺序执行的。\n资源数大于1，需要搭配互斥量使用，注意使用的顺序问题\n","date":"2023-07-01T00:00:00Z","image":"https://ztcode9547.github.io/florian-klauer-nptLmg6jqDo-unsplash.jpg","permalink":"https://ztcode9547.github.io/p/%E4%BD%BF%E7%94%A8-hugo-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84-blog/","title":"使用 Hugo 建立自己的 Blog"}]