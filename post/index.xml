<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 404_abandon</title>
        <link>https://ztcode9547.github.io/post/</link>
        <description>Recent content in Posts on 404_abandon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>404_abandon</copyright>
        <lastBuildDate>Thu, 19 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ztcode9547.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>CHAOARO：基于动态混沌对抗的学习驱动混合Aquila优化器和人工兔优化算法</title>
        <link>https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</link>
        <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/CHAOARO.png" alt="Featured image of post CHAOARO：基于动态混沌对抗的学习驱动混合Aquila优化器和人工兔优化算法" /&gt;&lt;p&gt;论文2：&amp;ldquo;CHAOARO：基于动态混沌对抗的学习驱动混合Aquila优化器和人工兔优化算法&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.AO：Aquila 优化器（2021）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AO具有强大的探索能力，但由于探索阶段不足，在解决一些复杂情况时仍然存在求解精度差和过早收敛的问题。&lt;/p&gt;
&lt;p&gt;证明AO缺点的论文:Zhao, J.; Gao, Z.-M.; Chen, H.-F. The simplified aquila optimization algorithm. IEEE Access 2022, 10, 22487–22515. [CrossRef]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.ARO具有非常有竞争力的开采潜力，但其勘探能力还需要更令人满意。（2022）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	ARO算法的灵感来源于自然界中兔子的生存策略，包括迂回觅食和随机躲藏。迂回觅食策略迫使兔子吃其他兔子巢穴附近的草，这可以防止它的巢穴被捕食者发现。随机躲藏策略可以让兔子在自己的洞穴中随机选择一个洞穴躲藏，这样可以减少被敌人捕获的可能性。此外，兔子的能量收缩会导致其从迂回觅食策略向随机躲藏策略转变。该算法对这种生存策略进行数学建模，以开发一种新的优化器。&lt;/p&gt;
&lt;p&gt;​	ARO的探索和开发过程由E控制，这个E的公式里面是有随机数的，所以在勘探里面会有开发，在开发里面也会有勘探，但总的来说，前期勘探多，后期开发多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/ARO.png&#34;
	width=&#34;815&#34;
	height=&#34;582&#34;
	srcset=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/ARO_hu18218028476315088719.png 480w, https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/ARO_hu1591504996471219799.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ARO&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.该论文的创新点结合AO的勘探机制和ARO的开发机制，设计了自适应切换机制（ASM）以更好地控制探索和开发过程。这个自适应切换机制就是AVAO的饥饿率，还引入混沌对立学习（COBL）策略来避免算法陷入局部最优。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.混沌对立学习：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B2%8C%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0.png&#34;
	width=&#34;262&#34;
	height=&#34;68&#34;
	srcset=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B2%8C%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu6911134787683554913.png 480w, https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B2%8C%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu17122665319887741086.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;混沌对立学习&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;385&#34;
		data-flex-basis=&#34;924px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;em&gt;φ&lt;/em&gt;就是混沌因子，论文里面提及了10个。需选择实验结果最好的一个&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B2%8C%E5%9B%A0%E5%AD%90.png&#34;
	width=&#34;863&#34;
	height=&#34;500&#34;
	srcset=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B2%8C%E5%9B%A0%E5%AD%90_hu17867462042898740033.png 480w, https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B2%8C%E5%9B%A0%E5%AD%90_hu12480863395797819792.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;混沌因子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;414px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提醒一下，除了现在学习的混沌对立学习，之前学习了随机对立学习，镜头对立学习，复合对立学习和螺旋对立学习&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/CHAOARO.png&#34;
	width=&#34;1155&#34;
	height=&#34;814&#34;
	srcset=&#34;https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/CHAOARO_hu7473125948031212917.png 480w, https://ztcode9547.github.io/p/chaoaro%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E6%B7%B7%E6%B2%8C%E5%AF%B9%E6%8A%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E9%A9%B1%E5%8A%A8%E6%B7%B7%E5%90%88aquila%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E4%BA%BA%E5%B7%A5%E5%85%94%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/CHAOARO_hu13981360604815001656.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CHAOARO&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>IHAOAVOA：针对全局优化问题的改进混合 Aquila 优化器和非洲秃鹫优化算法</title>
        <link>https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</link>
        <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_3.png" alt="Featured image of post IHAOAVOA：针对全局优化问题的改进混合 Aquila 优化器和非洲秃鹫优化算法" /&gt;&lt;p&gt;论文l：IHAOAVOA: An improved hybrid aquila optimizer and African vultures optimization algorithm for global optimization problems
IHAOAVOA：针对全局优化问题的改进混合 Aquila 优化器和非洲秃鹫优化算法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AO：Aquila 优化器（2021）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AO的特点：具有较强的全局勘探能力，但局部开发能力不够。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证明第二点论据的论文：S. Wang, H. Jia, L. Abualigah, Q. Liu, R. Zheng, An improved hybrid aquila optimizer and harris hawks algorithm for solving industrial engineering optimization problems, Processes, 9 (2021),1551. &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.3390/pr9091551&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.3390/pr9091551&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原因：不可避免地存在过早收敛和容易陷入局部极小值，主要是由于利用阶段不充分导致的，exploration占2/3，exploiation只占1/3。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四种策列，勘探阶段和开发阶段各占两种。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/AO.png&#34;
	width=&#34;664&#34;
	height=&#34;443&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/AO_hu4501671214488804369.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/AO_hu7967003442029931722.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AO&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;1.AVOA：非洲秃鹫优化算法（2021）&lt;/p&gt;
&lt;p&gt;2.AVOA的优点：具有非常好的开发能力，但缺少全局勘探能力。&lt;/p&gt;
&lt;p&gt;3.AVOA的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定最好种群和第二好种群&lt;/li&gt;
&lt;li&gt;计算饥饿率,AVOA是根据饥饿率来确定勘探阶段和开发阶段的，饥饿率的计算是有一套公式，里面有随机值，有一定的随机性，也有根据迭代的代数影响，但总的趋势是越来越小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.勘探有两个方法，开发有四种方法，所以说它开发能力强。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/AVOA.png&#34;
	width=&#34;820&#34;
	height=&#34;622&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/AVOA_hu290162664172404953.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/AVOA_hu18143517445891520367.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AVOA&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;
+++&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OBL：对立学习&lt;/li&gt;
&lt;li&gt;OBL主要思想是同时评估当前解的适应度和对立解的适应度，然后保留较优解。&lt;/li&gt;
&lt;li&gt;缺点：OBL只能在一个固定位置生成对立解，仍然无法改善复杂问题的缺陷&lt;/li&gt;
&lt;li&gt;证明第3点论据的论文：Q. Fan, Z. Chen, W. Zhang, X. Fang, ESSAWOA: Enhanced whale optimization algorithm integrated with salp swarm algorithm for global optimization, Eng. Comput., 38 (2022), 797–814.https://doi.org/10.1007/s00366-020-01189-3&lt;/li&gt;
&lt;li&gt;LOBL：镜头对立学习&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E9%95%9C%E5%A4%B4%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0.png&#34;
	width=&#34;364&#34;
	height=&#34;104&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E9%95%9C%E5%A4%B4%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu5415431286618934143.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E9%95%9C%E5%A4%B4%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu7795938024961118886.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;镜头对立学习&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;350&#34;
		data-flex-basis=&#34;840px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;6.ROBL：随机对立学习，用rand（）函数，具有较大的随机性，可以增加种群的多样性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0.png&#34;
	width=&#34;349&#34;
	height=&#34;48&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu7422122660781228943.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu1657331986030756242.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;随机对立学习&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;727&#34;
		data-flex-basis=&#34;1745px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;7.COBL:该论文的复合对立学习：使用概率决定使用LOBL或者ROBL&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E5%A4%8D%E5%90%88%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0.png&#34;
	width=&#34;475&#34;
	height=&#34;113&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E5%A4%8D%E5%90%88%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu9487339012414390900.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E5%A4%8D%E5%90%88%E5%AF%B9%E7%AB%8B%E5%AD%A6%E4%B9%A0_hu4076987820129490750.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;复合对立学习&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;420&#34;
		data-flex-basis=&#34;1008px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;Fitness-Distance Balance:适应值-距离平衡（FDB）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在共生有机体搜索（SOS），随机分形搜索（SFS），郊狼优化算法（COA）有使用到这种方法&lt;/li&gt;
&lt;li&gt;FDB在得分不仅考虑候选解的适应度，还考虑和最优解的距离&lt;/li&gt;
&lt;li&gt;可以在哪些地方使用：在一些方法里面有使用到，在种群里面随机找一个解的这种情况，可以使用FDB个体，进行代替&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;IHAOAVOA&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA.png&#34;
	width=&#34;848&#34;
	height=&#34;349&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_hu6629975132163105008.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_hu4015625125010833226.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IHAOAVOA&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;242&#34;
		data-flex-basis=&#34;583px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_2.png&#34;
	width=&#34;840&#34;
	height=&#34;130&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_2_hu9747142882845801822.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_2_hu9799744160950450164.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IHAOAVOA_2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;646&#34;
		data-flex-basis=&#34;1550px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_3.png&#34;
	width=&#34;1090&#34;
	height=&#34;783&#34;
	srcset=&#34;https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_3_hu12030634840986773169.png 480w, https://ztcode9547.github.io/p/ihaoavoa%E9%92%88%E5%AF%B9%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B%E6%B7%B7%E5%90%88-aquila-%E4%BC%98%E5%8C%96%E5%99%A8%E5%92%8C%E9%9D%9E%E6%B4%B2%E7%A7%83%E9%B9%AB%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/IHAOAVOA_3_hu5345335090662158209.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IHAOAVOA_3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;想法：使用螺旋对立学习+一个算法进行勘探+FDB+AVOA进行开发&lt;/p&gt;
</description>
        </item>
        <item>
        <title>找工作</title>
        <link>https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/</link>
        <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B82.png" alt="Featured image of post 找工作" /&gt;&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B81.png&#34;
	width=&#34;733&#34;
	height=&#34;689&#34;
	srcset=&#34;https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B81_hu16037978816924581405.png 480w, https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B81_hu742317516339029420.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;公司1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;255px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B82.png&#34;
	width=&#34;698&#34;
	height=&#34;491&#34;
	srcset=&#34;https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B82_hu15396000932171218181.png 480w, https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E5%85%AC%E5%8F%B82_hu17038690286567299099.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;公司2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/offer3.png&#34;
	width=&#34;595&#34;
	height=&#34;839&#34;
	srcset=&#34;https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/offer3_hu6405417662942997304.png 480w, https://ztcode9547.github.io/p/%E6%89%BE%E5%B7%A5%E4%BD%9C/offer3_hu515633640210369803.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;offer3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;170px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>博客更新步骤以及git的使用</title>
        <link>https://ztcode9547.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8Agit%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8Agit%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8Agit%E7%9A%84%E4%BD%BF%E7%94%A8/gerenboke.jpg" alt="Featured image of post 博客更新步骤以及git的使用" /&gt;&lt;h1 id=&#34;上传文档到博客的步骤&#34;&gt;上传文档到博客的步骤
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;首先创建一个文档，指令为：hugo new content post/名字/index.zh-cn.md&lt;/li&gt;
&lt;li&gt;在文档内添加头部信息，包括标签，时间等&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: &amp;#34;使用 Hugo 建立自己的 Blog&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: 2023-07-01  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tags: [&amp;#34;hugo&amp;#34;, &amp;#34;blog&amp;#34;]           
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;categories: [&amp;#34;博客改造&amp;#34;] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;image: florian-klauer-nptLmg6jqDo-unsplash.jpg 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;draft: false  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“ -  -  -  ”必须要有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;title: &amp;ldquo;使用 Hugo 建立自己的 Blog&amp;rdquo;  //博客名字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;date: 2023-07-01   //时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tags: [&amp;ldquo;hugo&amp;rdquo;, &amp;ldquo;blog&amp;rdquo;]           //标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;categories: [&amp;ldquo;博客改造&amp;rdquo;]          //归档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;image: florian-klauer-nptLmg6jqDo-unsplash.jpg //上传博客照片，直接使用文件名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;draft: false                         //这表示该文章是否是草稿状态，false不会在网站上公开显示。它可以被用来保存和编辑内容，直到你准备好发布为止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.编写博客，上传照片直接拉取，会把找复制到当前文档的文件夹下。&lt;/p&gt;
&lt;p&gt;4.使用命令hugo server -D 生成静态页面&lt;/p&gt;
&lt;p&gt;5.使用命令自动部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;提交信息&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;git的使用&#34;&gt;git的使用
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>手撕线程池</title>
        <link>https://ztcode9547.github.io/p/%E6%89%8B%E6%92%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
        <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/%E6%89%8B%E6%92%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
        <description></description>
        </item>
        <item>
        <title>C&#43;&#43;基本特性</title>
        <link>https://ztcode9547.github.io/p/c-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</link>
        <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/c-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</guid>
        <description>&lt;h1 id=&#34;程序的执行过程&#34;&gt;程序的执行过程
&lt;/h1&gt;&lt;p&gt;​	编程被执行后会变成一个进程。进程会生成一个虚拟地址空间。但是对于程序员来说，只要了解虚拟地址空间的四个区即可。想深入了解，可以去学习操作系统这门课。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;代码区和常量区：
​	 此区是用来存放代码的，也会用来存放真正的常量，比如“abc”字符串，“1”，“88”等数字。这些是真正的常量。再来看，使用const关键字修饰的变量，只是编译器把变量视为常量罢了。和真正的常量有本质上的区别。如果是局部变量被const关键字修饰，那它很有可能存在栈上。如果是全局的变量被const修饰，那它可能存在常量区，这要看编译器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈区&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	是函数执行的空间，规则是先入后处出。当函数开始执行，将会压栈。当函数执行完毕，将会出栈，内存将会释放。
3. 堆区&lt;/p&gt;
&lt;p&gt;​	是程序动态分配内存的地方，因为栈区的内存很小，如果我们有一个很大的变量，压栈是非常耗费资源的。所以我们可以在堆区给那个很大的变量动态分配内存，得到指向那个变量的指针后·。在栈区使用指针来操作那个变量，提高了程序的执行效率。&lt;strong&gt;需要提醒一点：堆区的内存远远大于栈区。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;有一个非常注意的点，堆区的内存需要手动释放，不然会造成内存泄漏。而栈则不需要，栈会根据顺序自动出栈，所以内存会自动销毁。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;静态变量区和全局变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	是存放静态变量的区域。所有的变量概括起来，就两个范畴。一个是生命周期，一个是作用域。静态变量是生命周期贯穿整个进程。但是它有自己的作用域。静态变量是在&lt;strong&gt;程序运行前&lt;/strong&gt;，就进行了初始化。和那些在栈上面完成初始化，在堆上动态分配内存后在开始初始化的变量，有本质的区别。&lt;/p&gt;
&lt;p&gt;​	是存放全局变量的区域。全局变量是**所有函数之外（包括main函数外）**定义的变量，这种变量叫全局变量。&lt;strong&gt;在c语言中经常使用，但是在C++不建议使用，因为会破坏封装性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/c-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E5%86%85%E5%AD%98.png&#34;
	width=&#34;603&#34;
	height=&#34;411&#34;
	srcset=&#34;https://ztcode9547.github.io/p/c-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E5%86%85%E5%AD%98_hu11848909714227405779.png 480w, https://ztcode9547.github.io/p/c-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E5%86%85%E5%AD%98_hu1641559402407678564.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;虚拟地址内存&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常有可能遇到的坑：在栈上面动态分配内存后，得到的指向那块内存的指针。这个指针是属于栈上的局部变量，它会随着出栈而被释放。如果这个变量是普通的变量，没有析构函数，那会造成内存泄漏问题。所有一定要几种手动释放内存。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;new关键字&#34;&gt;new关键字
&lt;/h1&gt;&lt;p&gt;C++经常使用new关键字动态分配内存&lt;/p&gt;
&lt;p&gt;它可以给当个变量分配内存，也可给数组分配内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在分配单个对象的内存时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当对象是普通变量时，可以分配对应的内存&lt;/li&gt;
&lt;li&gt;当对象是类对象时，会调用&lt;strong&gt;构造函数&lt;/strong&gt;，如果没有对应的&lt;strong&gt;构造函数&lt;/strong&gt;，&lt;strong&gt;就会报错。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在分配数组对象内存时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于普通变量：可以使用“（）”将所有对象全部初始化为0。&lt;/li&gt;
&lt;li&gt;对于类对象，有没有“（）”都一样，均使用&lt;strong&gt;默认构造函数&lt;/strong&gt;，如果没&lt;strong&gt;有默认构造函数就会报错&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和c语言的malloc的区别：使用普通变量没区别，分配类对象的时候，new首先会分配内存，然后再调用构造函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内存泄漏问题&#34;&gt;内存泄漏问题
&lt;/h1&gt;&lt;p&gt;内存泄漏是指堆内存被占满，这是最严重的错误，会导致程序破溃。且这种错误非常的隐秘。&lt;/p&gt;
&lt;p&gt;避免内存泄漏的方法：&lt;/p&gt;
&lt;p&gt;1.new内存，记得delete掉，但是人往往会疏忽。&lt;/p&gt;
&lt;p&gt;2.使用智能指针，智能指针能够自己释放掉内存。是非常好的防御性编程手段。&lt;/p&gt;
&lt;p&gt;3.使用&lt;strong&gt;异常处理&lt;/strong&gt;部分可以恰当的处理程序出现的异常，让程序有错误就立马处理，或直接终止进程，或忽略，不要让异常莫	名其妙。这也是非常好的防御性编程手段。&lt;/p&gt;
&lt;p&gt;4.使用一些监测内存泄漏的工具。在window端和Linux端都有这样的工具&lt;/p&gt;
&lt;h1 id=&#34;命名空间&#34;&gt;命名空间
&lt;/h1&gt;&lt;p&gt;​	在大型项目中，往往是多个小组协调合作。所有很容易造成命名的重复，造成编译的错误。所有命名空间就是为解决这个问题而出现的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//比如团队A和团队B都需要定义一个叫做Test的类。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命名空间的实现原理，C++最后都要转化为C来执行程序。&lt;strong&gt;在namespace A中定义的Test类，其实全名是A::Test。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++所有特有的库（指c没有的库）,都使用了std的命名空间。比如最常用的iostream。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提及命名空间，就不得不提using关键字了。&lt;/p&gt;
&lt;p&gt;using关键字是为了节省命名空间的书写。using关键字在命名空间方面主要有两种用法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;using 命名空间：：变量名。这样以后使用此变量时只要使用变量名就可以了。&lt;/li&gt;
&lt;li&gt;using namspce 命名空间。这样，每一个变量都会在该命名空间中寻找。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意点：using关键字虽然方便，但也有可能造成命名空间的污染，当两个空间的同名的变量都使用using关键字，编译器就不知道使用哪一个了。所有千万不要在头文件使用using关键字，这样造成命名空间污染是很难找到。要使用也要在main.cpp文件下使用。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>socket编程</title>
        <link>https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/</link>
        <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/TCP.png" alt="Featured image of post socket编程" /&gt;&lt;p&gt;网络通信：Socket+IO复用+多线程或者线程池+libevent框架&lt;/p&gt;
&lt;h1 id=&#34;基本概念&#34;&gt;基本概念
&lt;/h1&gt;&lt;h2 id=&#34;局域网&#34;&gt;局域网
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;覆盖范围较小的计算机网络，外面访问不到。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;广域网&#34;&gt;广域网
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;是一种覆盖广泛地理区域的计算机网络，它可以跨越城市、国家甚至跨越大陆。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;网络协议&#34;&gt;网络协议
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;是互相通信对等实体必须遵守的一种规则，这种规则可以是标准的，也可以说自定义的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ip协议&#34;&gt;IP协议
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是表示终端在网络中的地址，分为IPv4和IPv6。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们在window系统cmd下输入命令ipconfig或者在Linux系统下输入ifconfig都可以显示ip地址，这个ip地址是局域网内的ip地址，如果使用网线接入外网，会统一分配公网IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPv4本质是一个整形数，有4个字节，所以有32位，所以有2的32次方个ip地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPv4使用点分十进制来表示，比如192.168.247.135，最小为：0.0.0.0，最大为：255.255.255.255。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用ping+域名的方式查看当前设备是否能访问域名地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;端口&#34;&gt;端口
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ip地址是能够定位设备，端口是能够定位计算机里面的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;端口本质是一个无符号的短整型，占两个字节，所以有0到65535种可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端执行connect函数后，会分配一个新的端口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcpip四层模型&#34;&gt;Tcp/Ip四层模型
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/Tcp_Ip%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B.png&#34;
	width=&#34;189&#34;
	height=&#34;514&#34;
	srcset=&#34;https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/Tcp_Ip%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B_hu1767345724923505170.png 480w, https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/Tcp_Ip%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B_hu4686904838196450558.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Tcp_Ip四层模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;36&#34;
		data-flex-basis=&#34;88px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;应用层：最上层，也是程序员写业务的层次。有HTTP（超文本传输协议），FTP（文件传输协议）&lt;/p&gt;
&lt;p&gt;传输层：TCP协议，UDP协议&lt;/p&gt;
&lt;p&gt;网络层：IP协议&lt;/p&gt;
&lt;p&gt;网络接口层：无线局域网（WLAN），以太网（Ethernet）&lt;/p&gt;
&lt;h2 id=&#34;字节序&#34;&gt;字节序
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顾名思义是字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，也就是说对于单字符来说是没有字节序问题的，字符串是单字符的集合，因此字符串也没有字节序问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前字节序有两种：小端字节序（主机字节序）和大端字节序（网络字节序）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小端字节序（主机字节序）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据的地位存储到内存的地位，数据的高位存储到内存的高位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我们使用的PC机，数据的存储默认使用的是小端。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大端字节序（网络字节序）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据的地位存储内存的高位，数据的高位存储内存的地位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;套接字通信过程中操作的数据都是大端存储的，包括：接收/发送的数据、IP地址、端口。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字节序在编程中一般在ip地址和端口绑定需要手动转换，而在发送数据和接收数据的函数里，系统内核自动帮我们进行字节序的转换&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结:我们使用的设备是用主机字节序的，而网络通信是使用网络字节序的，所以我们要把数据转为网络字节序进行通信，通信结束，然后又把网络字节序转为主机字节序进行接收。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字节序举例：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/%E5%AD%97%E8%8A%82%E5%BA%8F%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B8%BE%E4%BE%8B.png&#34;
	width=&#34;444&#34;
	height=&#34;150&#34;
	srcset=&#34;https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/%E5%AD%97%E8%8A%82%E5%BA%8F%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B8%BE%E4%BE%8B_hu15231814666717699858.png 480w, https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/%E5%AD%97%E8%8A%82%E5%BA%8F%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B8%BE%E4%BE%8B_hu96969010991770678.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;字节序的存储方式举例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;296&#34;
		data-flex-basis=&#34;710px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;socket网络通信&#34;&gt;Socket网络通信
&lt;/h2&gt;&lt;p&gt;​	就像一台排插，排插就是服务器，插头就是客户端，排插有多个插口，等待多个插头链接。和套接字相关的函数被包含在头文件&lt;strong&gt;arpa/inet.h&lt;/strong&gt;中。一个头文件就全部包含了socket相关的api。&lt;/p&gt;
&lt;h2 id=&#34;tcp通信流程&#34;&gt;TCP通信流程
&lt;/h2&gt;&lt;p&gt;TCP三大特点：面向连接，安全，流式传输&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向连接：是一个全双工的通信，三次握手建立连接，四次挥手解除链接。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全：会对每一个包进行校验，丢包会重发。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流式传输：相当于发送接收两端有一条水管，发送多了，接收不了那么多，会让发送慢点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/TCP.png&#34;
	width=&#34;445&#34;
	height=&#34;631&#34;
	srcset=&#34;https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/TCP_hu9196714618122811001.png 480w, https://ztcode9547.github.io/p/socket%E7%BC%96%E7%A8%8B/TCP_hu1595196316029287531.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;TCP通信流程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;169px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件描述符在网络通信中的作用&#34;&gt;文件描述符在网络通信中的作用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个文件描述符对应两个内存。一个叫读缓冲区，一个叫写缓冲区。我们在调用accept函数，send函数和wirte函数时，客户端和服务器不是直接发送的，而是通过这些函数往这些缓冲区写数据或者读数据，然后内核会帮我们从缓冲区里面拿数据进行网络通信，是操作系统自动的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个文件描述符对应两个内存：一个叫读缓冲区，一个叫写缓冲区。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读缓冲区：通过文件描述符可以把内存的数据读出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写缓冲区：通过文件描述符可以往内存写入数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监听类型的文件描述符：也包含两块内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用accpet函数会监听这个文件描述符的读缓冲区，如果没有连接请求，这个读缓冲区为空，则会阻塞。这也是调用accept函数会阻塞的原因。&lt;/li&gt;
&lt;li&gt;如果不为空，则可以往读缓冲区内存读数据，则解除阻塞。说明有新的客户端连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信的文件描述符:也包含两块内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和上面类似，调用的send函数和wirte函数都是监听内存是否有数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;strong&gt;通过这种方式，可以增加网络通信的安全性，程序员不必管数据是如何发送和接收的，只要把数据放入相应的缓冲区和读取相关的缓冲区即可。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;通信代码&#34;&gt;通信代码
&lt;/h1&gt;&lt;h2 id=&#34;经典的tcp的回声服务器端代码&#34;&gt;经典的Tcp的回声服务器端代码
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;#34;servero.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;echo_server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//创建套接字
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;socket create fail&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//捆绑ip和端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//这个宏的值为0 == 0.0.0.0，可以接受任何地址来的客户端
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;htons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//htons函数将端口主机字节序-》网络字节序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bind fail&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//listen函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;listen fail&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//accept函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cliAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clilen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cliefd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clilen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//和bind不一样，accept存的是指向内存大小那个变量的指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliefd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;accept fail&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;客户端的ip地址是%s,端口号为%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ntohs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//打印客户端的地址和端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//read函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;kt&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliefd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;//send函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;客户端说：%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;kt&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;write_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliefd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//发送不需要发送这个buf，看读到多少字节，或者使用stlen函数+1。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;发送数据失败了&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;客户端断开连接&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;接收数据失败&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//动态分配内存记得释放
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//close函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cliefd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;缺点：服务器只能和一个客户端通信，且服务器没有客户端连接会阻塞。连接后客户端没有发数据，服务器也会阻塞&lt;/strong&gt;。&lt;strong&gt;基于上述处理方式，在单线程/单进程场景下，服务器是无法处理多连接的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;改进：使用多线程；使用多进程；使用IO多路复用；多线程+IO多路复用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;遇到的一个坑：使用printf函数打印中文，文件一定要使用utf-8格式，Linux系统是默认使用utf-8格式，不然会出现乱码。解决方法：使用记事本把文件另存为utf-8格式，然后替代原来的文件。&lt;/p&gt;
&lt;h2 id=&#34;经典的tcp的客户器端代码&#34;&gt;经典的Tcp的客户器端代码
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//创建socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clifd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clifd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;socket create fail&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//connect函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inet_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;192.168.136.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;htons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clifd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;connect fail&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;//send函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;第%d次说话&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//动态格式化字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nf&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//延迟1秒
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clifd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//不使用sizeof，不必发送整个buf，使用strlen函数+1看字符串长度。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nf&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;发送数据失败了&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;//read函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raed_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clifd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;raed_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;接收数据失败了&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;//close函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clifd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;多线程的tcp的回声服务器端代码&#34;&gt;多线程的Tcp的回声服务器端代码
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>TCP原理及对粘包的处理</title>
        <link>https://ztcode9547.github.io/p/tcp%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E7%B2%98%E5%8C%85%E7%9A%84%E5%A4%84%E7%90%86/</link>
        <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/tcp%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E7%B2%98%E5%8C%85%E7%9A%84%E5%A4%84%E7%90%86/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/florian-klauer-nptLmg6jqDo-unsplash.jpg" alt="Featured image of post TCP原理及对粘包的处理" /&gt;&lt;h1 id=&#34;tcp的三次握手和四次挥手&#34;&gt;TCP的三次握手和四次挥手
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>多线程</title>
        <link>https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="Featured image of post 多线程" /&gt;&lt;p&gt;&lt;strong&gt;进程是资源分配的最小单元，线程是操作系统调度执行的最小单元。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程和线程的区别&#34;&gt;进程和线程的区别
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;从空间的角度：进程使用一个独立的空间，多个线程共用一个独立的空间。每个线程都有自己的栈区，线程之间共用堆区，代码区和常量区，静态区。&lt;/li&gt;
&lt;li&gt;从操作系统调度的角度：一个进程只能占用一个时间片，多个线程占用多个时间片。不管是线程还是进程，都只能占一个时间片&lt;/li&gt;
&lt;li&gt;从切换和调度的损耗角度：线程的上下文切换损耗较低，进程则较大。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB.png&#34;
	width=&#34;722&#34;
	height=&#34;453&#34;
	srcset=&#34;https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB_hu4280869212463743246.png 480w, https://ztcode9547.github.io/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB_hu6044828015189993119.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;进程和线程的区别&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程相关的函数c语言&#34;&gt;线程相关的函数（C语言）
&lt;/h2&gt;&lt;p&gt;头文件：#include &amp;lt;pthread.h&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;得到线程id&#34;&gt;得到线程ID：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pthread_t pthread_self(void);	// 返回当前线程的线程ID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;线程创建&#34;&gt;线程创建：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @brief 创建一个线程。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[out] thread 需要创建的线程ID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[in] attr 属性一般填NULL。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[in] start_routine,线程函数指针，为void *(*start_routine) (void *)类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[in] arg，将数据传入线程函数内部，为void*类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @return 线程创建成功返回0，创建失败返回对应的错误号。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pthread_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;pthread_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;pthread_attr_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_routine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;主线程的生命周期和进程是一起的，主线程执行完，虚拟地址空间会被回收，不管子线程执行完没有，子线程也会被回收。所以可以使用pthread_join函数，这个函数是一个阻塞函数，让主线程阻塞，等待子线程执行完再回收资源。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;线程回收函数&#34;&gt;线程回收函数：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @brief 1.阻塞主线程，等待子线程执行完。 2.获取子线程退出的数据，搭配pthread_exit使用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *				
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[in] thread 被回收的线程ID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[out] retval 二级指针，指向一级指针的地址, 是一个传出参数, 这个地址中存储了pthread_exit() 传递出的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *					数据，如果不需要这个参数，可以指定为NULL。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @return 线程回收成功返回0，回收失败返回错误号。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pthread_join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;pthread_t&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;坑：子线程回收退出时，回收子线程数据，这个数据不能在子线程的栈上，因为子线程退出，子线程的栈会被回收，这个空间不能被访问。这个数据只能放在全局区或者堆区，要不放在主线程的栈上。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;线程退出函数&#34;&gt;线程退出函数：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @brief 1.只要调用这个函数，该线程会退出，且不会释放虚拟地址空间，不管是主线程还是子线程，所以经常用来让线程
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *			退出。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @brief 2.也可也搭配pthread_join使用，回收子线程的数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *				
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[in] retval 线程退出的时候携带的数据，当前子线程的主线程会得到该数据。如果不需要使用，指定为NULL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @return 线程分离成功返回0，回收失败返回错误号。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pthread_exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;线程分离函数&#34;&gt;线程分离函数
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @brief 1.只要调用这个函数，子线程会和主线程分离，子线程的回收不归主线程管了，子线程的回收其占用的内核资源就 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *		   被系统的其他进程接管并回收了。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *				
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param[in] thread 子线程ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @return 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pthread_detach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;pthread_t&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;几种使用情况：&lt;/p&gt;
&lt;p&gt;1.如果不介意主线程阻塞，可以使用pthread_join函数回收子线程。&lt;/p&gt;
&lt;p&gt;2.如果介意主线程阻塞，可以使用pthread_detach函数进行线程分离。&lt;/p&gt;
&lt;p&gt;3.如果线程执行完了，建议添加线程退出函数，更规范些。&lt;/p&gt;
&lt;h2 id=&#34;线程相关的函数c&#34;&gt;线程相关的函数（C++）
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>使用 Hugo 建立自己的 Blog</title>
        <link>https://ztcode9547.github.io/p/%E4%BD%BF%E7%94%A8-hugo-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84-blog/</link>
        <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://ztcode9547.github.io/p/%E4%BD%BF%E7%94%A8-hugo-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84-blog/</guid>
        <description>&lt;img src="https://ztcode9547.github.io/florian-klauer-nptLmg6jqDo-unsplash.jpg" alt="Featured image of post 使用 Hugo 建立自己的 Blog" /&gt;&lt;h1 id=&#34;线程同步&#34;&gt;线程同步
&lt;/h1&gt;&lt;h2 id=&#34;概念&#34;&gt;概念
&lt;/h2&gt;&lt;h2 id=&#34;同步方式&#34;&gt;同步方式
&lt;/h2&gt;&lt;p&gt;互斥锁，读写锁，条件变量和信号量&lt;/p&gt;
&lt;h2 id=&#34;临界资源&#34;&gt;临界资源
&lt;/h2&gt;&lt;p&gt;全局变量或者是堆区变量&lt;/p&gt;
&lt;h2 id=&#34;互斥量&#34;&gt;互斥量
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;不是所有的线程都可以对互斥锁解锁，哪个线程加的锁, 哪个线程才能解锁成功。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;死锁&#34;&gt;死锁
&lt;/h2&gt;&lt;h2 id=&#34;读写锁&#34;&gt;读写锁
&lt;/h2&gt;&lt;p&gt;​	&lt;strong&gt;读写锁是互斥锁的升级版, 在做读操作的时候可以提高程序的执行效率，如果所有的线程都是做读操作, 那么读是并行的，但是使用互斥锁，读操作也是串行的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	有两种锁的方式：锁读操作和锁写操作。锁读操作后，其他的锁读操作是被允许的，但是锁写操作就被阻塞了。锁写操作后，其他的锁读操作和锁读操作是不被允许的。&lt;/p&gt;
&lt;h2 id=&#34;条件变量&#34;&gt;条件变量
&lt;/h2&gt;&lt;p&gt;一般情况下条件变量用于处理生产者和消费者模型，并且和互斥锁配合使用。&lt;/p&gt;
&lt;h2 id=&#34;信号量&#34;&gt;信号量
&lt;/h2&gt;&lt;p&gt;信号量和条件变量相同的是可以阻塞线程，不同的是条件变量能解开互斥量的锁，信号量不能解锁。&lt;/p&gt;
&lt;p&gt;资源数为1：如果生产者和消费者使用的信号量总资源数为1，那么不会出现生产者线程和消费者线程同时访问共享资源的情况，不管生产者和消费者线程有多少个，它们都是顺序执行的。&lt;/p&gt;
&lt;p&gt;资源数大于1，需要搭配互斥量使用，注意使用的顺序问题&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
